name: CI-CD
true:
  push:
    branches:
    - main
  pull_request: null
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      ECR_REPO_API: upwork-api
      ECR_REPO_WORKER: upwork-worker
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: pnpm
    - name: Approve build scripts
      run: 'echo ''{ "allowBuildScripts": true }'' > ~/.pnpmrc'
    - run: pnpm install --frozen-lockfile
    - name: Run migrations
      run: pnpm --filter api run migration:run
    - run: pnpm lint && pnpm test
    - name: Build API image
      run: docker build -f apps/api/Dockerfile -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_API
        }}:latest .
    - name: Build Worker image
      run: docker build -f apps/worker/Dockerfile -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_WORKER
        }}:latest .
    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        region: ${{ env.AWS_REGION }}
    - name: Push images
      run: 'docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_API }}:latest

        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_WORKER }}:latest

        '
  smoke:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: upwork
          POSTGRES_PASSWORD: upwork
          POSTGRES_DB: upwork
        ports:
        - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s
          --health-retries=5
      localstack:
        image: localstack/localstack
        ports:
        - 4566:4566
        env:
          SERVICES: sqs
        options: --health-cmd="curl -f http://localhost:4566/ || exit 1" --health-interval=10s
          --health-timeout=5s --health-retries=5
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: pnpm
    - name: Approve build scripts
      run: 'echo ''{ "allowBuildScripts": true }'' > ~/.pnpmrc'
    - run: pnpm install --frozen-lockfile
    - name: Run migrations
      run: pnpm --filter api run migration:run
    - run: pnpm run test:e2e && pnpm run smoke | tee smoke.log
    - uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage
        if-no-files-found: ignore
    - uses: actions/upload-artifact@v4
      with:
        name: smoke.log
        path: smoke.log
  deploy:
    needs:
    - build
    - smoke
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_REGION: us-east-1
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      ECR_REPO_API: upwork-api
      ECR_REPO_WORKER: upwork-worker
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: pnpm
    - name: Approve build scripts
      run: 'echo ''{ "allowBuildScripts": true }'' > ~/.pnpmrc'
    - run: pnpm install --frozen-lockfile
    - name: Run migrations
      run: pnpm --filter api run migration:run
    - name: Terraform plan
      run: terraform -chdir=infra plan
    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      run: terraform -chdir=infra apply -auto-approve
    - name: Update Lambda code
      run: 'aws lambda update-function-code --function-name job-poller --image-uri
        ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_WORKER }}:latest

        aws lambda update-function-code --function-name activity-feed --image-uri
        ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO_WORKER }}:latest

        aws lambda update-function-code --function-name api --image-uri ${{ env.ECR_REGISTRY
        }}/${{ env.ECR_REPO_API }}:latest

        '
